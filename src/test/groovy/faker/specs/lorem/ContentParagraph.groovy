package faker.specs.lorem

import spock.lang.Specification
import faker.Faker
import faker.Lorem
import faker.specs.support.Localized

@Localized
class ContentParagraph extends Specification {

    def static standardWordList
    def static completeWordList

    def setupSpec() {
        standardWordList = Faker.bundle["faker.lorem.words"]
        completeWordList = standardWordList + Faker.bundle["faker.lorem.supplemental"]
    }

    def "paragraph content, from standard word list"(def p) {
        expect: "the paragraph must consist of words from the standard word list"
        p.scan(~/\w+/).each { word ->
            assert word.toLowerCase() in standardWordList
        }

        where: "paragraph is generated by Lorem.paragraph()"
        p << (1..100).collect { Lorem.paragraph() }
    }

    def "paragraph content, from complete word list"(def p) {
        expect: "the paragraph must consist of words from the standard word list"
        p.scan(~/\w+/).each { word ->
            assert word.toLowerCase() in completeWordList
        }

        where: "paragraph is generated by call Lorem.paragraph()"
        p << (1..100).collect { Lorem.paragraph(true) }
    }

    def "paragraph structure"(def p) {
        expect: "the paragraph should start with an uppercase character"
        assert (p[0] as Character).isUpperCase()

        and: "the paragraph should end with a period"
        assert p.endsWith(".")

        where: "paragraph is generated by Lorem.paragraph()"
        p << (1..100).collect { Lorem.paragraph() }
    }
}